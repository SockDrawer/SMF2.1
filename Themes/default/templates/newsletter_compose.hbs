	{{! Composing a newsletter. }}
	<div id="preview_section"{{#unless context.preview_message}} style="display:none"{{/unless}}>
		<div class="cat_bar">
			<h3 class="catbg">
				<span id="preview_subject">{{{context.preview_subject}}}</span>
			</h3>
		</div>
		<div class="windowbg noup">
			<div class="post" id="preview_body">
				{{#if context.preview_message}}{{{context.preview_message}}}{{else}}<br>{{/if}}
			</div>
		</div>
	</div><br>

	<div id="admincenter">
		<form name="newsmodify" action="{{scripturl}}?action=admin;area=news;sa=mailingsend" method="post" accept-charset="UTF-8">
			<div class="cat_bar">
				<h3 class="catbg">
					{{> helpicon help='email_members'}} {{{txt.admin_newsletters}}}
				</h3>
			</div>
			<div class="information">
				{{{txt.email_variables}}}
			</div>
			<div class="windowbg">
				<div class="{{#if (eq context.error_type serious)}}errorbox{{else}}noticebox{{/if}}"{{#unless context.post_error.messages}} style="display: none"{{/unless}} id="errors">
					<dl>
						<dt>
							<strong id="error_serious">{{{txt.error_while_submitting}}}</strong>
						</dt>
						<dd class="error" id="error_list">
							{{#if context.post_error_messages}}{{{join context.post_error_messages '<br>'}}}{{/if}}
						</dd>
					</dl>
				</div>
				<dl id="post_header">
					<dt class="clear_left">
						<span{{#if context.post_error.no_subject}} class="error"{{/if}} id="caption_subject">{{{txt.subject}}}:</span>
					</dt>
					<dd id="pm_subject">
						<input type="text" name="subject" value="{{{context.subject}}}" size="60" maxlength="60"{{#if context.post_error.no_subject}} class="error"{{/if}}>
					</dd>
				</dl><hr class="clear">
				<div id="bbcBox_message"></div>

				{{#if (or context.smileys.postform context.smileys.popup)}}
				<div id="smileyBox_message"></div>
				{{/if}}

				{{! Show BBC buttons, smileys and textbox. }}
				{{{richtexteditor context.post_box_name 'smileyBox_message' 'bbcBox_message'}}}

				<ul>
					<li><label for="send_pm"><input type="checkbox" name="send_pm" id="send_pm"{{#if context.send_pm}} checked{{/if}} onclick="checkboxes_status(this);"> {{{txt.email_as_pms}}}</label></li>
					<li><label for="send_html"><input type="checkbox" name="send_html" id="send_html"{{#if context.send_html}} checked{{/if}} onclick="checkboxes_status(this);"> {{{txt.email_as_html}}}</label></li>
					<li><label for="parse_html"><input type="checkbox" name="parse_html" id="parse_html" checked disabled> {{{txt.email_parsed_html}}}</label></li>
				</ul>
				<br class="clear_right">
				<span id="post_confirm_buttons">
					{{{richtextbuttons context.post_box_name}}}
				</span>
			</div>
			{{session_form}}
			<input type="hidden" name="email_force" value="{{context.email_force}}">
			<input type="hidden" name="total_emails" value="{{context.total_emails}}">
			{{#each context.recipients}}
			<input type="hidden" name="{{{@key}}}" value="{{#if (eq @key 'emails')}}{{{join . ';'}}}{{else}}{{{join . ','}}}{{/if}}">
			{{/each}}

			{{! The functions used to preview a posts without loading a new page. }}
			<script>
				var txt_preview_title = {{{json txt.preview_title}}};
				var txt_preview_fetch = {{{json txt.preview_fetch}}};
				function previewPost()
				{
					if (window.XMLHttpRequest)
					{
						// Opera didn\'t support setRequestHeader() before 8.01.
						// @todo Remove support for old browsers
						if ('opera' in window)
						{
							var test = new XMLHttpRequest();
							if (!('setRequestHeader' in test))
								return submitThisOnce(document.forms.newsmodify);
						}
						// @todo Currently not sending poll options and option checkboxes.
						var x = new Array();
						var textFields = ['subject', {{{json context.post_box_name}}}];
						var checkboxFields = ['send_html', 'send_pm'];

						for (var i = 0, n = textFields.length; i < n; i++)
							if (textFields[i] in document.forms.newsmodify)
							{
								// Handle the WYSIWYG editor.
								if (textFields[i] == '{{context.post_box_name}}' && $("#{{context.post_box_name}}").data("sceditor") != undefined)
									x[x.length] = textFields[i] + '=' + $("#{{context.post_box_name}}").data("sceditor").getText();
								else
									x[x.length] = textFields[i] + '=' + $(document.forms.postmodify[textFields[i]]).val();
							}
						for (var i = 0, n = checkboxFields.length; i < n; i++)
							if (checkboxFields[i] in document.forms.newsmodify && document.forms.newsmodify.elements[checkboxFields[i]].checked)
								x[x.length] = checkboxFields[i] + '=' + document.forms.newsmodify.elements[checkboxFields[i]].value;

						x[x.length] = 'item=newsletterpreview';

						sendXMLDocument(sbb_prepareScriptUrl(sbb_scripturl) + 'action=xmlhttp;sa=previews;xml', x.join('&'), onDocSent);

						document.getElementById('preview_section').style.display = '';
						setInnerHTML(document.getElementById('preview_subject'), txt_preview_title);
						setInnerHTML(document.getElementById('preview_body'), txt_preview_fetch);

						return false;
					}
					else
						return submitThisOnce(document.forms.newsmodify);
				}
				function onDocSent(XMLDoc)
				{
					if (!XMLDoc)
					{
						document.forms.newsmodify.preview.onclick = new function ()
						{
							return true;
						}
						document.forms.newsmodify.preview.click();
					}

					// Show the preview section.
					var preview = XMLDoc.getElementsByTagName('storybb')[0].getElementsByTagName('preview')[0];
					setInnerHTML(document.getElementById('preview_subject'), preview.getElementsByTagName('subject')[0].firstChild.nodeValue);

					var bodyText = '';
					for (var i = 0, n = preview.getElementsByTagName('body')[0].childNodes.length; i < n; i++)
						bodyText += preview.getElementsByTagName('body')[0].childNodes[i].nodeValue;

					setInnerHTML(document.getElementById('preview_body'), bodyText);
					document.getElementById('preview_body').className = 'post';

					// Show a list of errors (if any).
					var errors = XMLDoc.getElementsByTagName('storybb')[0].getElementsByTagName('errors')[0];
					var errorList = new Array();
					for (var i = 0, numErrors = errors.getElementsByTagName('error').length; i < numErrors; i++)
						errorList[errorList.length] = errors.getElementsByTagName('error')[i].firstChild.nodeValue;
					document.getElementById('errors').style.display = numErrors == 0 ? 'none' : '';
					setInnerHTML(document.getElementById('error_list'), numErrors == 0 ? '' : errorList.join('<br>'));

					// Adjust the color of captions if the given data is erroneous.
					var captions = errors.getElementsByTagName('caption');
					for (var i = 0, numCaptions = errors.getElementsByTagName('caption').length; i < numCaptions; i++)
						if (document.getElementById('caption_' + captions[i].getAttribute('name')))
							document.getElementById('caption_' + captions[i].getAttribute('name')).className = captions[i].getAttribute('class');

					if (errors.getElementsByTagName('post_error').length == 1)
						document.forms.newsmodify.{{context.post_box_name}}.style.border = '1px solid red';
					else if (document.forms.newsmodify.{{context.post_box_name}}.style.borderColor == 'red' || document.forms.newsmodify.{{context.post_box_name}}.style.borderColor == 'red red red red')
					{
						if ('runtimeStyle' in document.forms.newsmodify.{{context.post_box_name}})
							document.forms.newsmodify.{{context.post_box_name}}.style.borderColor = '';
						else
							document.forms.newsmodify.{{context.post_box_name}}.style.border = null;
					}
					location.hash = '#' + 'preview_section';
				}

				function checkboxes_status (item)
				{
					if (item.id == 'send_html')
						document.getElementById('parse_html').disabled = !document.getElementById('parse_html').disabled;
					if (item.id == 'send_pm')
					{
						if (!document.getElementById('send_html').checked)
							document.getElementById('parse_html').disabled = true;
						else
							document.getElementById('parse_html').disabled = false;
						document.getElementById('send_html').disabled = !document.getElementById('send_html').disabled;
					}
				}
			</script>
		</form>
	</div>